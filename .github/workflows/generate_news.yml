# .github/workflows/generate_news.yml

name: Daily Newsletter Pipeline

on:
  workflow_dispatch:
  schedule:
    - cron: '0 5 * * *'

permissions:
  contents: write

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    steps:
      # =======================================================
      # STEP 1: GENERATE NEWSLETTER (Your existing logic)
      # =======================================================
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r ai/requirements.txt
      
      - name: Run AI Agent to generate newsletter
        id: generate_step
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          SERPER_API_KEY: ${{ secrets.SERPER_API_KEY }}
        run: python -m ai.src.main

      # =======================================================
      # STEP 2: COMMIT AND PUSH (Your existing logic, improved)
      # This step triggers Vercel, but Vercel will now wait for this
      # entire workflow to complete if configured correctly, or will
      # build with data that is about to be synced.
      # =======================================================
      - name: Commit and Push new newsletter
        if: ${{ success() && steps.generate_step.outcome == 'success' }}
        run: |
          git config --global user.name "The Payments Nerd Bot"
          git config --global user.email "bot@thepaymentsnerd.com"
          git pull origin main
          git add web/public/newsletter.json
          if git diff --staged --quiet; then
            echo "No changes to newsletter.json. Halting."
            exit 0
          else
            echo "Committing and pushing new newsletter..."
            git commit -m "feat: âœ¨ Generate daily newsletter for $(date +%F)"
            git push
          fi

      # =======================================================
      # STEP 3: SYNC TO SUPABASE (Logic from your sync-to-supabase.yml)
      # This block now runs sequentially AFTER the push.
      # =======================================================
      - name: Set up Node.js for Supabase Sync
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: web/package-lock.json

      - name: Install Node dependencies
        run: npm install
        working-directory: ./web

      - name: Sync data to Supabase
        run: node scripts/syncToSupabase.js
        working-directory: ./web
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}